
# Install Docker package which is required to run Polkadot node
- name: Install required packages
  yum:
    name: docker
    state: present

# Ensure Docker service is running and starts on boot
- name: Start and enable Docker
  service:
    name: docker
    state: started
    enabled: true

# Create directory to store Polkadot node data with correct permissions
- name: Create polkadot data directory
  file:
    path: /home/ec2-user/polkadot-data
    state: directory
    owner: ec2-user
    group: ec2-user

# Generate a unique node key for this Polkadot instance if it doesn't exist
- name: Generate the node key
  command: >
    sudo docker run --rm
    -v /home/ec2-user/polkadot-data:/polkadot-data
    parity/polkadot:{{ polkadot_version }}
    key generate-node-key --base-path /polkadot-data
  args:
    creates: /home/ec2-user/polkadot-data/chains/polkadot/network/secret_ed25519

# Stop the existing Polkadot service before updating
# - name: Stop the Polkadot service before updating
#   systemd:
#     name: polkadot
#     state: stopped

# Pull the specified version of Polkadot Docker image
- name: Pull the updated Polkadot Docker image
  docker_image:
    name: "parity/polkadot"
    tag: "{{ polkadot_version }}"
    source: pull

# Set secure permissions on the node key file
- name: Ensure correct permissions for node key
  file:
    path: /home/ec2-user/polkadot-data/chains/polkadot/network/secret_ed25519
    owner: ec2-user
    group: ec2-user
    mode: '0600'

# Deploy systemd service file from template to manage Polkadot container
- name: Copy the systemd service file
  template:
    src: polkadot.service.j2
    dest: /etc/systemd/system/polkadot.service
    owner: root
    group: root
    mode: '0644'

# Reload systemd to recognize the new service configuration
- name: Reload systemd to recognize the new service
  command: systemctl daemon-reload

# Start the Polkadot service with the new configuration
- name: Start the Polkadot systemd service with the updated Docker image
  systemd:
    name: polkadot
    enabled: true
    state: restarted

# Wait for 30 seconds to allow the service to initialize
- name: Wait for the Polkadot service to stabilize
  pause:
    seconds: 30

# Check if service is running properly, retry up to 10 times with 10-second intervals
- name: Verify Polkadot systemd service status
  shell: systemctl is-active polkadot
  register: service_status
  retries: 10
  delay: 10
  until: service_status.stdout == "active"
  changed_when: false

# Output the final service status for debugging purposes
- name: Debug Polkadot service status
  debug:
    msg: "Polkadot service is {{ service_status.stdout }}"
